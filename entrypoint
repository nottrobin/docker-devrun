#! /bin/sh

set -euo pipefail  # safe mode

# Environment settings
# ===
if [ ! -f ${PROJECT_NAME_FILE} ]; then
  # Generate project name
  pwd | sha1sum | awk '{print $ 1}' | cut -c 1-8 > ${PROJECT_NAME_FILE}
fi
export COMPOSE_PROJECT_NAME=$(cat ${PROJECT_NAME_FILE})  # Set project name
export WORKDIR=$(pwd)  # Set the working directory
export COMPOSE_FILE=/docker-compose$(${DB:-} && echo ".db").yml  # Choose compose file

# Set local project setting defaults
# ===

##
# Get optional arguments
#  --port {port} - The local port to run the web service on
#  --debug {true/false} - Turn on/off Django DEBUG mode
#  --secret-key {key} - Provide a SECRET_KEY setting for Django
##
invalid() {
    echo "Command not recognised."
    usage
    exit 1
}

while [[ -n "${1:-}" ]] && [[ "${1:0:1}" == "-" ]]; do
    key="$1"

    case $key in
        -p|--port)
            if [ -z "${2:-}" ]; then invalid; fi
            PORT="$2"
            shift
        ;;
        -s|--secret-key)
            if [ -z "${2:-}" ]; then invalid; fi
            SECRET_KEY="$2"
            shift
        ;;
        --no-debug)
            DJANGO_DEBUG=false
        ;;
        --db)
            DB=true
        ;;
        -h|--help)
            usage
            exit
        ;;
        *)
            invalid
        ;;
    esac
    shift
done

# Is the database already running?
if ${DB}; then
  export DB_RUNNING=$(docker-compose exec db true 2> /dev/null && echo "true" || echo "false")
fi

# Run the input command
if [ -n "${1:-}" ]; then
  command=$1
  shift
  arguments=$@

  ${command} ${arguments}
else
  server
fi
